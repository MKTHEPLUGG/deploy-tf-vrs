name: "Terraform Deploy to Azure"
description: "Deploy infrastructure to Azure using Terraform"
inputs:
  storage_account_name:
    description: "Azure Storage Account Name for Terraform State"
    required: true
  container_name:
    description: "Azure Blob Container Name for Terraform State"
    required: true
  key:
    description: "Key for Terraform State in Azure Blob"
    required: true
  resource_group_name:
    description: "Azure Resource Group Name for Storage Account"
    required: true
  client_id:
    description: "Azure Client ID for Service Principal"
    required: true
  client_secret:
    description: "Azure Client Secret for Service Principal"
    required: true
  tenant_id:
    description: "Azure Tenant ID for Service Principal"
    required: true
  subscription_id:
    description: "Azure subscription ID for Service Principal"
    required: true
  working_directory:
    description: "Working directory for Terraform files"
    required: false
    default: "."
runs:
  using: "composite"
  steps:
    - run: |
        # debug statements #
        # echo "Working directory input: ${{ inputs.working_directory }}"
        # echo "Current directory: $(pwd)"
        # echo "Subscription ID: ${{ inputs.subscription_id }}"
        # ls -al
        terraform init \
            -backend-config="storage_account_name=${{ inputs.storage_account_name }}" \
            -backend-config="container_name=${{ inputs.container_name }}" \
            -backend-config="key=${{ inputs.key }}" \
            -backend-config="resource_group_name=${{ inputs.resource_group_name }}" \
            -backend-config="client_id=${{ inputs.client_id }}" \
            -backend-config="client_secret=${{ inputs.client_secret }}" \
            -backend-config="tenant_id=${{ inputs.tenant_id }}" \
            -backend-config="subscription_id=${{ inputs.subscription_id }}"
        terraform import module.keyvault.azurerm_resource_group.SymbolicRG /subscriptions/${{ inputs.subscription_id }}/resourceGroups/test-tf-2
        terraform validate && terraform plan && terraform apply -auto-approve
      shell: bash
      working-directory: ${{ inputs.working_directory }}

